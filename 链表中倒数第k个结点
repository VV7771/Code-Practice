/**
 *  #[derive(PartialEq, Eq, Debug, Clone)]
 *  pub struct ListNode {
 *      pub val: i32,
 *      pub next: Option<Box<ListNode>>
 *  }
 * 
 *  impl ListNode {
 *      #[inline]
 *      fn new(val: i32) -> Self {
 *          ListNode {
 *              val: val,
 *              next: None,
 *          }
 *      }
 *  }
 */

struct Solution{

}

impl Solution {
    fn new() -> Self {
        Solution{}
    }

    /**
    * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
    * 
        * @param k int整型 
        * @param head ListNode类 
        * @return ListNode类
    */
    pub fn FindKthToTail(&self, k: i32, mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        // write code here
        let mut head_ref = &head;
        for _ in 0..k {
            head_ref = match head_ref.as_ref() {
                None => return None,
                Some(bx) => &bx.next,
            };
        }
        let mut cnt = 0;
        while let Some(bx) = head_ref {
            cnt += 1;
            head_ref = & bx.next;
        }
        for _ in 0..cnt {
            head = head.unwrap().next;
        }
        head
    }
}
