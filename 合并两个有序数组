//给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
//
//初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。
//
//
//
//示例 1：
//
//输入：nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3
//输出：[1, 2, 2, 3, 5, 6]
//示例 2：
//
//输入：nums1 = [1], m = 1, nums2 = [], n = 0
//输出：[1]
//
//
//提示：
//
//nums1.length == m + n
//nums2.length == n
//0 <= m, n <= 200
//1 <= m + n <= 200
//- 109 <= nums1[i], nums2[i] <= 109

int* addToArrayForm(int* A, int ASize, int K, int* returnSize) {
    int* res = malloc(sizeof(int) * fmax(10, ASize + 1));
    *returnSize = 0;
    for (int i = ASize - 1; i >= 0; --i) {
        int sum = A[i] + K % 10;
        K /= 10;
        if (sum >= 10) {
            K++;
            sum -= 10;
        }
        res[(*returnSize)++] = sum;
    }
    for (; K > 0; K /= 10) {
        res[(*returnSize)++] = K % 10;
    }
    for (int i = 0; i < (*returnSize) / 2; i++) {
        int tmp = res[i];
        res[i] = res[(*returnSize) - 1 - i];
        res[(*returnSize) - 1 - i] = tmp;
    }
    return res;
}
另一个思路是将整个加数 KK 加入数组表示的数的最低位。

上面的例子 123+912123+912，我们把它表示成 [1,2,3+912][1,2,3+912]。然后，我们计算 3+912=9153+912=915。55 留在当前这一位，将 910/10=91910/10=91 以进位的形式加入下一位。

然后，我们再重复这个过程，计算 [1,2+91,5][1,2+91,5]。我们得到 9393，33 留在当前位，将 90/10=990/10=9 以进位的形式加入下一位。继而又得到 [1+9,3,5][1+9,3,5]，重复这个过程之后，最终得到结果 [1,0,3,5][1,0,3,5]。

C++JavaGolangCJavaScript

class Solution {
public:
    vector<int> addToArrayForm(vector<int> &A, int K) {
        vector<int> res;
        int n = A.size();
        for (int i = n - 1; i >= 0 || K > 0; --i, K /= 10) {
            if (i >= 0) {
                K += A[i];
            }
            res.push_back(K % 10);
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
